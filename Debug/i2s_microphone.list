
i2s_microphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d28  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08003ec0  08003ec0  00004ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e0  080044e0  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  080044e0  080044e0  000054e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044e8  080044e8  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e8  080044e8  000054e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044ec  080044ec  000054ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080044f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d0  20000014  08004504  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  08004504  000067e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab85  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002140  00000000  00000000  00010bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00012d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f8  00000000  00000000  00013788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016385  00000000  00000000  00013f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7a7  00000000  00000000  0002a305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000880be  00000000  00000000  00038aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0b6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a54  00000000  00000000  000c0bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000c3604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003ea8 	.word	0x08003ea8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08003ea8 	.word	0x08003ea8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_I2S_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int16_t 	toReceive[256];
int16_t		toTransmit;
uint16_t	i2s_done = 0;
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	//toTransmit = toReceive;
	//HAL_I2S_Transmit_DMA(&hi2s2, &toTransmit, 1);
	i2s_done = 1;
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <HAL_I2S_RxCpltCallback+0x24>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	801a      	strh	r2, [r3, #0]
	HAL_I2S_Receive_DMA(hi2s, toReceive, 256);
 80004d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004da:	4905      	ldr	r1, [pc, #20]	@ (80004f0 <HAL_I2S_RxCpltCallback+0x28>)
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f002 fab1 	bl	8002a44 <HAL_I2S_Receive_DMA>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200003d4 	.word	0x200003d4
 80004f0:	200001d4 	.word	0x200001d4

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fe19 	bl	8001130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f851 	bl	80005a4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000502:	f000 f8b7 	bl	8000674 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f987 	bl	8000818 <MX_GPIO_Init>
  MX_DMA_Init();
 800050a:	f000 f95d 	bl	80007c8 <MX_DMA_Init>
  MX_I2S2_Init();
 800050e:	f000 f8ff 	bl	8000710 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000512:	f000 f92b 	bl	800076c <MX_I2S3_Init>
  MX_I2C1_Init();
 8000516:	f000 f8cd 	bl	80006b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s3, toReceive, 256);
 800051a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800051e:	491c      	ldr	r1, [pc, #112]	@ (8000590 <main+0x9c>)
 8000520:	481c      	ldr	r0, [pc, #112]	@ (8000594 <main+0xa0>)
 8000522:	f002 fa8f 	bl	8002a44 <HAL_I2S_Receive_DMA>

  ssd1306_Init();
 8000526:	f000 f9ed 	bl	8000904 <ssd1306_Init>
  ssd1306_SetCursor(0, 0);
 800052a:	2100      	movs	r1, #0
 800052c:	2000      	movs	r0, #0
 800052e:	f000 fba1 	bl	8000c74 <ssd1306_SetCursor>
  ssd1306_WriteString("i2c microphone", Font_6x8, 1);
 8000532:	4a19      	ldr	r2, [pc, #100]	@ (8000598 <main+0xa4>)
 8000534:	2301      	movs	r3, #1
 8000536:	ca06      	ldmia	r2, {r1, r2}
 8000538:	4818      	ldr	r0, [pc, #96]	@ (800059c <main+0xa8>)
 800053a:	f000 fb75 	bl	8000c28 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800053e:	f000 fa6f 	bl	8000a20 <ssd1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if(i2s_done == 1) {
 8000542:	4b17      	ldr	r3, [pc, #92]	@ (80005a0 <main+0xac>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d1fb      	bne.n	8000542 <main+0x4e>
  		i2s_done = 0;
 800054a:	4b15      	ldr	r3, [pc, #84]	@ (80005a0 <main+0xac>)
 800054c:	2200      	movs	r2, #0
 800054e:	801a      	strh	r2, [r3, #0]
			ssd1306_Fill(0);
 8000550:	2000      	movs	r0, #0
 8000552:	f000 fa41 	bl	80009d8 <ssd1306_Fill>
  		for(int x = 0; x < 128; x++) {
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	e012      	b.n	8000582 <main+0x8e>
				ssd1306_DrawPixel(x, (toReceive[x*2]>>8) + 32, 1);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	b2d8      	uxtb	r0, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	4a0a      	ldr	r2, [pc, #40]	@ (8000590 <main+0x9c>)
 8000566:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800056a:	121b      	asrs	r3, r3, #8
 800056c:	b21b      	sxth	r3, r3
 800056e:	b2db      	uxtb	r3, r3
 8000570:	3320      	adds	r3, #32
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	f000 fa7a 	bl	8000a70 <ssd1306_DrawPixel>
  		for(int x = 0; x < 128; x++) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3301      	adds	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b7f      	cmp	r3, #127	@ 0x7f
 8000586:	dde9      	ble.n	800055c <main+0x68>
  		}
			ssd1306_UpdateScreen();
 8000588:	f000 fa4a 	bl	8000a20 <ssd1306_UpdateScreen>
  	if(i2s_done == 1) {
 800058c:	e7d9      	b.n	8000542 <main+0x4e>
 800058e:	bf00      	nop
 8000590:	200001d4 	.word	0x200001d4
 8000594:	200000cc 	.word	0x200000cc
 8000598:	20000000 	.word	0x20000000
 800059c:	08003ec0 	.word	0x08003ec0
 80005a0:	200003d4 	.word	0x200003d4

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	@ 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 fc4c 	bl	8003e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b27      	ldr	r3, [pc, #156]	@ (800066c <SystemClock_Config+0xc8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a26      	ldr	r2, [pc, #152]	@ (800066c <SystemClock_Config+0xc8>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b24      	ldr	r3, [pc, #144]	@ (800066c <SystemClock_Config+0xc8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b21      	ldr	r3, [pc, #132]	@ (8000670 <SystemClock_Config+0xcc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a20      	ldr	r2, [pc, #128]	@ (8000670 <SystemClock_Config+0xcc>)
 80005ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <SystemClock_Config+0xcc>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000618:	2364      	movs	r3, #100	@ 0x64
 800061a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fe7b 	bl	8003324 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000634:	f000 f926 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	2103      	movs	r1, #3
 8000654:	4618      	mov	r0, r3
 8000656:	f003 f8dd 	bl	8003814 <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000660:	f000 f910 	bl	8000884 <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3750      	adds	r7, #80	@ 0x50
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800068a:	2301      	movs	r3, #1
 800068c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800068e:	23c0      	movs	r3, #192	@ 0xc0
 8000690:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8000692:	2310      	movs	r3, #16
 8000694:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fa85 	bl	8003bac <HAL_RCCEx_PeriphCLKConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80006a8:	f000 f8ec 	bl	8000884 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <MX_I2C1_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006c0:	4a12      	ldr	r2, [pc, #72]	@ (800070c <MX_I2C1_Init+0x58>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006f2:	f001 fbb9 	bl	8001e68 <HAL_I2C_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f8c2 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000030 	.word	0x20000030
 8000708:	40005400 	.word	0x40005400
 800070c:	00061a80 	.word	0x00061a80

08000710 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <MX_I2S2_Init+0x54>)
 8000716:	4a14      	ldr	r2, [pc, #80]	@ (8000768 <MX_I2S2_Init+0x58>)
 8000718:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800071a:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <MX_I2S2_Init+0x54>)
 800071c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000720:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <MX_I2S2_Init+0x54>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_I2S2_Init+0x54>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <MX_I2S2_Init+0x54>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000734:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <MX_I2S2_Init+0x54>)
 8000736:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800073a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_I2S2_Init+0x54>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <MX_I2S2_Init+0x54>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_I2S2_Init+0x54>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_I2S2_Init+0x54>)
 8000750:	f002 f838 	bl	80027c4 <HAL_I2S_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800075a:	f000 f893 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000084 	.word	0x20000084
 8000768:	40003800 	.word	0x40003800

0800076c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_I2S3_Init+0x54>)
 8000772:	4a14      	ldr	r2, [pc, #80]	@ (80007c4 <MX_I2S3_Init+0x58>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8000776:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_I2S3_Init+0x54>)
 8000778:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800077c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <MX_I2S3_Init+0x54>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000784:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_I2S3_Init+0x54>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800078a:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <MX_I2S3_Init+0x54>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000790:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_I2S3_Init+0x54>)
 8000792:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000796:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_I2S3_Init+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_I2S3_Init+0x54>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_I2S3_Init+0x54>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_I2S3_Init+0x54>)
 80007ac:	f002 f80a 	bl	80027c4 <HAL_I2S_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007b6:	f000 f865 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000cc 	.word	0x200000cc
 80007c4:	40003c00 	.word	0x40003c00

080007c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_DMA_Init+0x4c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <MX_DMA_Init+0x4c>)
 80007d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <MX_DMA_Init+0x4c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	200b      	movs	r0, #11
 80007f0:	f000 fe0f 	bl	8001412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80007f4:	200b      	movs	r0, #11
 80007f6:	f000 fe28 	bl	800144a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	200f      	movs	r0, #15
 8000800:	f000 fe07 	bl	8001412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000804:	200f      	movs	r0, #15
 8000806:	f000 fe20 	bl	800144a <HAL_NVIC_EnableIRQ>

}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_GPIO_Init+0x68>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a16      	ldr	r2, [pc, #88]	@ (8000880 <MX_GPIO_Init+0x68>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_GPIO_Init+0x68>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <MX_GPIO_Init+0x68>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a0f      	ldr	r2, [pc, #60]	@ (8000880 <MX_GPIO_Init+0x68>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <MX_GPIO_Init+0x68>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_GPIO_Init+0x68>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a08      	ldr	r2, [pc, #32]	@ (8000880 <MX_GPIO_Init+0x68>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_GPIO_Init+0x68>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <Error_Handler+0x8>

08000890 <ssd1306_Reset>:
#include <string.h>  // For memcpy
#include "main.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
//    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 0);
//    HAL_Delay(1);
//    HAL_GPIO_WritePin(OledReset_GPIO_Port, OledReset_Pin, 1);
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af04      	add	r7, sp, #16
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	2301      	movs	r3, #1
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	2200      	movs	r2, #0
 80008bc:	2178      	movs	r1, #120	@ 0x78
 80008be:	4803      	ldr	r0, [pc, #12]	@ (80008cc <ssd1306_WriteCommand+0x2c>)
 80008c0:	f001 fc16 	bl	80020f0 <HAL_I2C_Mem_Write>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000030 	.word	0x20000030

080008d0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af04      	add	r7, sp, #16
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	f04f 32ff 	mov.w	r2, #4294967295
 80008e2:	9202      	str	r2, [sp, #8]
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2301      	movs	r3, #1
 80008ec:	2240      	movs	r2, #64	@ 0x40
 80008ee:	2178      	movs	r1, #120	@ 0x78
 80008f0:	4803      	ldr	r0, [pc, #12]	@ (8000900 <ssd1306_WriteData+0x30>)
 80008f2:	f001 fbfd 	bl	80020f0 <HAL_I2C_Mem_Write>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000030 	.word	0x20000030

08000904 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000908:	f7ff ffc2 	bl	8000890 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800090c:	2064      	movs	r0, #100	@ 0x64
 800090e:	f000 fc81 	bl	8001214 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000912:	2000      	movs	r0, #0
 8000914:	f000 f9da 	bl	8000ccc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000918:	2020      	movs	r0, #32
 800091a:	f7ff ffc1 	bl	80008a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ffbe 	bl	80008a0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000924:	20b0      	movs	r0, #176	@ 0xb0
 8000926:	f7ff ffbb 	bl	80008a0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800092a:	20c8      	movs	r0, #200	@ 0xc8
 800092c:	f7ff ffb8 	bl	80008a0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ffb5 	bl	80008a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000936:	2010      	movs	r0, #16
 8000938:	f7ff ffb2 	bl	80008a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800093c:	2040      	movs	r0, #64	@ 0x40
 800093e:	f7ff ffaf 	bl	80008a0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000942:	20ff      	movs	r0, #255	@ 0xff
 8000944:	f000 f9ae 	bl	8000ca4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000948:	20a1      	movs	r0, #161	@ 0xa1
 800094a:	f7ff ffa9 	bl	80008a0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800094e:	20a6      	movs	r0, #166	@ 0xa6
 8000950:	f7ff ffa6 	bl	80008a0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000954:	20a8      	movs	r0, #168	@ 0xa8
 8000956:	f7ff ffa3 	bl	80008a0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800095a:	203f      	movs	r0, #63	@ 0x3f
 800095c:	f7ff ffa0 	bl	80008a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000960:	20a4      	movs	r0, #164	@ 0xa4
 8000962:	f7ff ff9d 	bl	80008a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000966:	20d3      	movs	r0, #211	@ 0xd3
 8000968:	f7ff ff9a 	bl	80008a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff ff97 	bl	80008a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000972:	20d5      	movs	r0, #213	@ 0xd5
 8000974:	f7ff ff94 	bl	80008a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000978:	20f0      	movs	r0, #240	@ 0xf0
 800097a:	f7ff ff91 	bl	80008a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800097e:	20d9      	movs	r0, #217	@ 0xd9
 8000980:	f7ff ff8e 	bl	80008a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000984:	2022      	movs	r0, #34	@ 0x22
 8000986:	f7ff ff8b 	bl	80008a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800098a:	20da      	movs	r0, #218	@ 0xda
 800098c:	f7ff ff88 	bl	80008a0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000990:	2012      	movs	r0, #18
 8000992:	f7ff ff85 	bl	80008a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000996:	20db      	movs	r0, #219	@ 0xdb
 8000998:	f7ff ff82 	bl	80008a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800099c:	2020      	movs	r0, #32
 800099e:	f7ff ff7f 	bl	80008a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80009a2:	208d      	movs	r0, #141	@ 0x8d
 80009a4:	f7ff ff7c 	bl	80008a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80009a8:	2014      	movs	r0, #20
 80009aa:	f7ff ff79 	bl	80008a0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80009ae:	2001      	movs	r0, #1
 80009b0:	f000 f98c 	bl	8000ccc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 f80f 	bl	80009d8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80009ba:	f000 f831 	bl	8000a20 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80009be:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <ssd1306_Init+0xd0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80009c4:	4b03      	ldr	r3, [pc, #12]	@ (80009d4 <ssd1306_Init+0xd0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80009ca:	4b02      	ldr	r3, [pc, #8]	@ (80009d4 <ssd1306_Init+0xd0>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	711a      	strb	r2, [r3, #4]
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200007d8 	.word	0x200007d8

080009d8 <ssd1306_Fill>:
{
	ssd1306_WriteCommand(SSD1306_DEACTIVATE_SCROLL);
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	e00d      	b.n	8000a04 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d101      	bne.n	80009f2 <ssd1306_Fill+0x1a>
 80009ee:	2100      	movs	r1, #0
 80009f0:	e000      	b.n	80009f4 <ssd1306_Fill+0x1c>
 80009f2:	21ff      	movs	r1, #255	@ 0xff
 80009f4:	4a09      	ldr	r2, [pc, #36]	@ (8000a1c <ssd1306_Fill+0x44>)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4413      	add	r3, r2
 80009fa:	460a      	mov	r2, r1
 80009fc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3301      	adds	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a0a:	d3ed      	bcc.n	80009e8 <ssd1306_Fill+0x10>
    }
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	200003d8 	.word	0x200003d8

08000a20 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000a26:	2300      	movs	r3, #0
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	e016      	b.n	8000a5a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	3b50      	subs	r3, #80	@ 0x50
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff34 	bl	80008a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff ff31 	bl	80008a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000a3e:	2010      	movs	r0, #16
 8000a40:	f7ff ff2e 	bl	80008a0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	01db      	lsls	r3, r3, #7
 8000a48:	4a08      	ldr	r2, [pc, #32]	@ (8000a6c <ssd1306_UpdateScreen+0x4c>)
 8000a4a:	4413      	add	r3, r2
 8000a4c:	2180      	movs	r1, #128	@ 0x80
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ff3e 	bl	80008d0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	3301      	adds	r3, #1
 8000a58:	71fb      	strb	r3, [r7, #7]
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b07      	cmp	r3, #7
 8000a5e:	d9e5      	bls.n	8000a2c <ssd1306_UpdateScreen+0xc>
    }
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200003d8 	.word	0x200003d8

08000a70 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	71bb      	strb	r3, [r7, #6]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	db3d      	blt.n	8000b06 <ssd1306_DrawPixel+0x96>
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a8e:	d83a      	bhi.n	8000b06 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000a90:	797b      	ldrb	r3, [r7, #5]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d11a      	bne.n	8000acc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a96:	79fa      	ldrb	r2, [r7, #7]
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	b2d8      	uxtb	r0, r3
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	01db      	lsls	r3, r3, #7
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b14 <ssd1306_DrawPixel+0xa4>)
 8000aa6:	5cd3      	ldrb	r3, [r2, r3]
 8000aa8:	b25a      	sxtb	r2, r3
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	f003 0307 	and.w	r3, r3, #7
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	b259      	sxtb	r1, r3
 8000abc:	79fa      	ldrb	r2, [r7, #7]
 8000abe:	4603      	mov	r3, r0
 8000ac0:	01db      	lsls	r3, r3, #7
 8000ac2:	4413      	add	r3, r2
 8000ac4:	b2c9      	uxtb	r1, r1
 8000ac6:	4a13      	ldr	r2, [pc, #76]	@ (8000b14 <ssd1306_DrawPixel+0xa4>)
 8000ac8:	54d1      	strb	r1, [r2, r3]
 8000aca:	e01d      	b.n	8000b08 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000acc:	79fa      	ldrb	r2, [r7, #7]
 8000ace:	79bb      	ldrb	r3, [r7, #6]
 8000ad0:	08db      	lsrs	r3, r3, #3
 8000ad2:	b2d8      	uxtb	r0, r3
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	01db      	lsls	r3, r3, #7
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a0e      	ldr	r2, [pc, #56]	@ (8000b14 <ssd1306_DrawPixel+0xa4>)
 8000adc:	5cd3      	ldrb	r3, [r2, r3]
 8000ade:	b25a      	sxtb	r2, r3
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	4013      	ands	r3, r2
 8000af4:	b259      	sxtb	r1, r3
 8000af6:	79fa      	ldrb	r2, [r7, #7]
 8000af8:	4603      	mov	r3, r0
 8000afa:	01db      	lsls	r3, r3, #7
 8000afc:	4413      	add	r3, r2
 8000afe:	b2c9      	uxtb	r1, r1
 8000b00:	4a04      	ldr	r2, [pc, #16]	@ (8000b14 <ssd1306_DrawPixel+0xa4>)
 8000b02:	54d1      	strb	r1, [r2, r3]
 8000b04:	e000      	b.n	8000b08 <ssd1306_DrawPixel+0x98>
        return;
 8000b06:	bf00      	nop
    }
}
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	200003d8 	.word	0x200003d8

08000b18 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b089      	sub	sp, #36	@ 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4604      	mov	r4, r0
 8000b20:	1d38      	adds	r0, r7, #4
 8000b22:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b26:	461a      	mov	r2, r3
 8000b28:	4623      	mov	r3, r4
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	2b1f      	cmp	r3, #31
 8000b34:	d902      	bls.n	8000b3c <ssd1306_WriteChar+0x24>
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	2b7e      	cmp	r3, #126	@ 0x7e
 8000b3a:	d901      	bls.n	8000b40 <ssd1306_WriteChar+0x28>
        return 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e06c      	b.n	8000c1a <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000b40:	4b38      	ldr	r3, [pc, #224]	@ (8000c24 <ssd1306_WriteChar+0x10c>)
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	793b      	ldrb	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	2b80      	cmp	r3, #128	@ 0x80
 8000b4c:	dc06      	bgt.n	8000b5c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000b4e:	4b35      	ldr	r3, [pc, #212]	@ (8000c24 <ssd1306_WriteChar+0x10c>)
 8000b50:	885b      	ldrh	r3, [r3, #2]
 8000b52:	461a      	mov	r2, r3
 8000b54:	797b      	ldrb	r3, [r7, #5]
 8000b56:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000b58:	2b40      	cmp	r3, #64	@ 0x40
 8000b5a:	dd01      	ble.n	8000b60 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e05c      	b.n	8000c1a <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
 8000b64:	e04c      	b.n	8000c00 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	3b20      	subs	r3, #32
 8000b6c:	7979      	ldrb	r1, [r7, #5]
 8000b6e:	fb01 f303 	mul.w	r3, r1, r3
 8000b72:	4619      	mov	r1, r3
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	440b      	add	r3, r1
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
 8000b84:	e034      	b.n	8000bf0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d012      	beq.n	8000bbc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b96:	4b23      	ldr	r3, [pc, #140]	@ (8000c24 <ssd1306_WriteChar+0x10c>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b2d8      	uxtb	r0, r3
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <ssd1306_WriteChar+0x10c>)
 8000ba6:	885b      	ldrh	r3, [r3, #2]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4413      	add	r3, r2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	7bba      	ldrb	r2, [r7, #14]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f7ff ff5b 	bl	8000a70 <ssd1306_DrawPixel>
 8000bba:	e016      	b.n	8000bea <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000bbc:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <ssd1306_WriteChar+0x10c>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b2d8      	uxtb	r0, r3
 8000bca:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <ssd1306_WriteChar+0x10c>)
 8000bcc:	885b      	ldrh	r3, [r3, #2]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4413      	add	r3, r2
 8000bd6:	b2d9      	uxtb	r1, r3
 8000bd8:	7bbb      	ldrb	r3, [r7, #14]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bf0c      	ite	eq
 8000bde:	2301      	moveq	r3, #1
 8000be0:	2300      	movne	r3, #0
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	f7ff ff43 	bl	8000a70 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	3301      	adds	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
 8000bf0:	793b      	ldrb	r3, [r7, #4]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d3c5      	bcc.n	8000b86 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	797b      	ldrb	r3, [r7, #5]
 8000c02:	461a      	mov	r2, r3
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d3ad      	bcc.n	8000b66 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <ssd1306_WriteChar+0x10c>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	793a      	ldrb	r2, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <ssd1306_WriteChar+0x10c>)
 8000c16:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	@ 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200007d8 	.word	0x200007d8

08000c28 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	1d38      	adds	r0, r7, #4
 8000c32:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c36:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000c38:	e012      	b.n	8000c60 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	7818      	ldrb	r0, [r3, #0]
 8000c3e:	78fb      	ldrb	r3, [r7, #3]
 8000c40:	1d3a      	adds	r2, r7, #4
 8000c42:	ca06      	ldmia	r2, {r1, r2}
 8000c44:	f7ff ff68 	bl	8000b18 <ssd1306_WriteChar>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d002      	beq.n	8000c5a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	e008      	b.n	8000c6c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1e8      	bne.n	8000c3a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <ssd1306_SetCursor+0x2c>)
 8000c8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000c8c:	79bb      	ldrb	r3, [r7, #6]
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <ssd1306_SetCursor+0x2c>)
 8000c92:	805a      	strh	r2, [r3, #2]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	200007d8 	.word	0x200007d8

08000ca4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000cae:	2381      	movs	r3, #129	@ 0x81
 8000cb0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fdf3 	bl	80008a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fdef 	bl	80008a0 <ssd1306_WriteCommand>
}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d005      	beq.n	8000ce8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000cdc:	23af      	movs	r3, #175	@ 0xaf
 8000cde:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000ce0:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <ssd1306_SetDisplayOn+0x38>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	715a      	strb	r2, [r3, #5]
 8000ce6:	e004      	b.n	8000cf2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000ce8:	23ae      	movs	r3, #174	@ 0xae
 8000cea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000cec:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <ssd1306_SetDisplayOn+0x38>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fdd3 	bl	80008a0 <ssd1306_WriteCommand>
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200007d8 	.word	0x200007d8

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	4a0f      	ldr	r2, [pc, #60]	@ (8000d54 <HAL_MspInit+0x4c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d54 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	4a08      	ldr	r2, [pc, #32]	@ (8000d54 <HAL_MspInit+0x4c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	@ 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	@ (8000ddc <HAL_I2C_MspInit+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12b      	bne.n	8000dd2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a17      	ldr	r2, [pc, #92]	@ (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d96:	23c0      	movs	r3, #192	@ 0xc0
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9a:	2312      	movs	r3, #18
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da6:	2304      	movs	r3, #4
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <HAL_I2C_MspInit+0x8c>)
 8000db2:	f000 fed5 	bl	8001b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	@ 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020400 	.word	0x40020400

08000de8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	@ 0x38
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a80      	ldr	r2, [pc, #512]	@ (8001008 <HAL_I2S_MspInit+0x220>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d17a      	bne.n	8000f00 <HAL_I2S_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
 8000e0e:	4b7f      	ldr	r3, [pc, #508]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	4a7e      	ldr	r2, [pc, #504]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1a:	4b7c      	ldr	r3, [pc, #496]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e22:	623b      	str	r3, [r7, #32]
 8000e24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	4b78      	ldr	r3, [pc, #480]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a77      	ldr	r2, [pc, #476]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b75      	ldr	r3, [pc, #468]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
 8000e46:	4b71      	ldr	r3, [pc, #452]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a70      	ldr	r2, [pc, #448]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b6e      	ldr	r3, [pc, #440]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e5e:	2308      	movs	r3, #8
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e6e:	2305      	movs	r3, #5
 8000e70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	4865      	ldr	r0, [pc, #404]	@ (8001010 <HAL_I2S_MspInit+0x228>)
 8000e7a:	f000 fe71 	bl	8001b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000e7e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e90:	2305      	movs	r3, #5
 8000e92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	485e      	ldr	r0, [pc, #376]	@ (8001014 <HAL_I2S_MspInit+0x22c>)
 8000e9c:	f000 fe60 	bl	8001b60 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000ea0:	4b5d      	ldr	r3, [pc, #372]	@ (8001018 <HAL_I2S_MspInit+0x230>)
 8000ea2:	4a5e      	ldr	r2, [pc, #376]	@ (800101c <HAL_I2S_MspInit+0x234>)
 8000ea4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000ea6:	4b5c      	ldr	r3, [pc, #368]	@ (8001018 <HAL_I2S_MspInit+0x230>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eac:	4b5a      	ldr	r3, [pc, #360]	@ (8001018 <HAL_I2S_MspInit+0x230>)
 8000eae:	2240      	movs	r2, #64	@ 0x40
 8000eb0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb2:	4b59      	ldr	r3, [pc, #356]	@ (8001018 <HAL_I2S_MspInit+0x230>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb8:	4b57      	ldr	r3, [pc, #348]	@ (8001018 <HAL_I2S_MspInit+0x230>)
 8000eba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ebe:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ec0:	4b55      	ldr	r3, [pc, #340]	@ (8001018 <HAL_I2S_MspInit+0x230>)
 8000ec2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ec6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ec8:	4b53      	ldr	r3, [pc, #332]	@ (8001018 <HAL_I2S_MspInit+0x230>)
 8000eca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ece:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000ed0:	4b51      	ldr	r3, [pc, #324]	@ (8001018 <HAL_I2S_MspInit+0x230>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ed6:	4b50      	ldr	r3, [pc, #320]	@ (8001018 <HAL_I2S_MspInit+0x230>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000edc:	4b4e      	ldr	r3, [pc, #312]	@ (8001018 <HAL_I2S_MspInit+0x230>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ee2:	484d      	ldr	r0, [pc, #308]	@ (8001018 <HAL_I2S_MspInit+0x230>)
 8000ee4:	f000 facc 	bl	8001480 <HAL_DMA_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_I2S_MspInit+0x10a>
    {
      Error_Handler();
 8000eee:	f7ff fcc9 	bl	8000884 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a48      	ldr	r2, [pc, #288]	@ (8001018 <HAL_I2S_MspInit+0x230>)
 8000ef6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ef8:	4a47      	ldr	r2, [pc, #284]	@ (8001018 <HAL_I2S_MspInit+0x230>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000efe:	e07e      	b.n	8000ffe <HAL_I2S_MspInit+0x216>
  else if(hi2s->Instance==SPI3)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a46      	ldr	r2, [pc, #280]	@ (8001020 <HAL_I2S_MspInit+0x238>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d179      	bne.n	8000ffe <HAL_I2S_MspInit+0x216>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	4a3e      	ldr	r2, [pc, #248]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000f14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1a:	4b3c      	ldr	r3, [pc, #240]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b38      	ldr	r3, [pc, #224]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a37      	ldr	r2, [pc, #220]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b35      	ldr	r3, [pc, #212]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b31      	ldr	r3, [pc, #196]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a30      	ldr	r2, [pc, #192]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b2e      	ldr	r3, [pc, #184]	@ (800100c <HAL_I2S_MspInit+0x224>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f5e:	2310      	movs	r3, #16
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f6e:	2306      	movs	r3, #6
 8000f70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f76:	4619      	mov	r1, r3
 8000f78:	482a      	ldr	r0, [pc, #168]	@ (8001024 <HAL_I2S_MspInit+0x23c>)
 8000f7a:	f000 fdf1 	bl	8001b60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f7e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f90:	2306      	movs	r3, #6
 8000f92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481d      	ldr	r0, [pc, #116]	@ (8001010 <HAL_I2S_MspInit+0x228>)
 8000f9c:	f000 fde0 	bl	8001b60 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8000fa0:	4b21      	ldr	r3, [pc, #132]	@ (8001028 <HAL_I2S_MspInit+0x240>)
 8000fa2:	4a22      	ldr	r2, [pc, #136]	@ (800102c <HAL_I2S_MspInit+0x244>)
 8000fa4:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8000fa6:	4b20      	ldr	r3, [pc, #128]	@ (8001028 <HAL_I2S_MspInit+0x240>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <HAL_I2S_MspInit+0x240>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001028 <HAL_I2S_MspInit+0x240>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <HAL_I2S_MspInit+0x240>)
 8000fba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fbe:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <HAL_I2S_MspInit+0x240>)
 8000fc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fc6:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <HAL_I2S_MspInit+0x240>)
 8000fca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fce:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <HAL_I2S_MspInit+0x240>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <HAL_I2S_MspInit+0x240>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_I2S_MspInit+0x240>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000fe2:	4811      	ldr	r0, [pc, #68]	@ (8001028 <HAL_I2S_MspInit+0x240>)
 8000fe4:	f000 fa4c 	bl	8001480 <HAL_DMA_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_I2S_MspInit+0x20a>
      Error_Handler();
 8000fee:	f7ff fc49 	bl	8000884 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8001028 <HAL_I2S_MspInit+0x240>)
 8000ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <HAL_I2S_MspInit+0x240>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000ffe:	bf00      	nop
 8001000:	3738      	adds	r7, #56	@ 0x38
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40003800 	.word	0x40003800
 800100c:	40023800 	.word	0x40023800
 8001010:	40020800 	.word	0x40020800
 8001014:	40020400 	.word	0x40020400
 8001018:	20000114 	.word	0x20000114
 800101c:	40026070 	.word	0x40026070
 8001020:	40003c00 	.word	0x40003c00
 8001024:	40020000 	.word	0x40020000
 8001028:	20000174 	.word	0x20000174
 800102c:	40026010 	.word	0x40026010

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <NMI_Handler+0x4>

08001038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <MemManage_Handler+0x4>

08001048 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <UsageFault_Handler+0x4>

08001058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001086:	f000 f8a5 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <DMA1_Stream0_IRQHandler+0x10>)
 8001096:	f000 faf9 	bl	800168c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000174 	.word	0x20000174

080010a4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80010a8:	4802      	ldr	r0, [pc, #8]	@ (80010b4 <DMA1_Stream4_IRQHandler+0x10>)
 80010aa:	f000 faef 	bl	800168c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000114 	.word	0x20000114

080010b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <SystemInit+0x20>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c2:	4a05      	ldr	r2, [pc, #20]	@ (80010d8 <SystemInit+0x20>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001114 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010e0:	f7ff ffea 	bl	80010b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e4:	480c      	ldr	r0, [pc, #48]	@ (8001118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e6:	490d      	ldr	r1, [pc, #52]	@ (800111c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110a:	f002 fea9 	bl	8003e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110e:	f7ff f9f1 	bl	80004f4 <main>
  bx  lr    
 8001112:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001114:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800111c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001120:	080044f0 	.word	0x080044f0
  ldr r2, =_sbss
 8001124:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001128:	200007e4 	.word	0x200007e4

0800112c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC_IRQHandler>
	...

08001130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001134:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <HAL_Init+0x40>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800113e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <HAL_Init+0x40>)
 8001146:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800114a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	@ (8001170 <HAL_Init+0x40>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 f94f 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	200f      	movs	r0, #15
 8001160:	f000 f808 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fdd0 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023c00 	.word	0x40023c00

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f967 	bl	8001466 <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f000 f92f 	bl	8001412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	@ (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000010 	.word	0x20000010
 80011d0:	2000000c 	.word	0x2000000c

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000010 	.word	0x20000010
 80011f8:	200007e0 	.word	0x200007e0

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	200007e0 	.word	0x200007e0

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000010 	.word	0x20000010

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	@ (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db0b      	blt.n	80012ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	4907      	ldr	r1, [pc, #28]	@ (80012f8 <__NVIC_EnableIRQ+0x38>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2001      	movs	r0, #1
 80012e2:	fa00 f202 	lsl.w	r2, r0, r2
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	@ (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	@ (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	@ 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	@ 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff8e 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff29 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001424:	f7ff ff3e 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 8001428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff8e 	bl	8001350 <NVIC_EncodePriority>
 8001434:	4602      	mov	r2, r0
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff5d 	bl	80012fc <__NVIC_SetPriority>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff31 	bl	80012c0 <__NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffa2 	bl	80013b8 <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff feb6 	bl	80011fc <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e099      	b.n	80015d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2202      	movs	r2, #2
 80014a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014bc:	e00f      	b.n	80014de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014be:	f7ff fe9d 	bl	80011fc <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	d908      	bls.n	80014de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2220      	movs	r2, #32
 80014d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2203      	movs	r2, #3
 80014d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e078      	b.n	80015d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1e8      	bne.n	80014be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <HAL_DMA_Init+0x158>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001516:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001522:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4313      	orrs	r3, r2
 800152e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001534:	2b04      	cmp	r3, #4
 8001536:	d107      	bne.n	8001548 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001540:	4313      	orrs	r3, r2
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4313      	orrs	r3, r2
 8001546:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f023 0307 	bic.w	r3, r3, #7
 800155e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	4313      	orrs	r3, r2
 8001568:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	2b04      	cmp	r3, #4
 8001570:	d117      	bne.n	80015a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4313      	orrs	r3, r2
 800157a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00e      	beq.n	80015a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fa6f 	bl	8001a68 <DMA_CheckFifoParam>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d008      	beq.n	80015a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2240      	movs	r2, #64	@ 0x40
 8001594:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800159e:	2301      	movs	r3, #1
 80015a0:	e016      	b.n	80015d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fa26 	bl	80019fc <DMA_CalcBaseAndBitshift>
 80015b0:	4603      	mov	r3, r0
 80015b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b8:	223f      	movs	r2, #63	@ 0x3f
 80015ba:	409a      	lsls	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	f010803f 	.word	0xf010803f

080015dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_DMA_Start_IT+0x26>
 80015fe:	2302      	movs	r3, #2
 8001600:	e040      	b.n	8001684 <HAL_DMA_Start_IT+0xa8>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b01      	cmp	r3, #1
 8001614:	d12f      	bne.n	8001676 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2202      	movs	r2, #2
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 f9b8 	bl	80019a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001634:	223f      	movs	r2, #63	@ 0x3f
 8001636:	409a      	lsls	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0216 	orr.w	r2, r2, #22
 800164a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	2b00      	cmp	r3, #0
 8001652:	d007      	beq.n	8001664 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0208 	orr.w	r2, r2, #8
 8001662:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e005      	b.n	8001682 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800167e:	2302      	movs	r3, #2
 8001680:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001682:	7dfb      	ldrb	r3, [r7, #23]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001698:	4b8e      	ldr	r3, [pc, #568]	@ (80018d4 <HAL_DMA_IRQHandler+0x248>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a8e      	ldr	r2, [pc, #568]	@ (80018d8 <HAL_DMA_IRQHandler+0x24c>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	0a9b      	lsrs	r3, r3, #10
 80016a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b6:	2208      	movs	r2, #8
 80016b8:	409a      	lsls	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4013      	ands	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d01a      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0204 	bic.w	r2, r2, #4
 80016de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e4:	2208      	movs	r2, #8
 80016e6:	409a      	lsls	r2, r3
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f0:	f043 0201 	orr.w	r2, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016fc:	2201      	movs	r2, #1
 80016fe:	409a      	lsls	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4013      	ands	r3, r2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d012      	beq.n	800172e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00b      	beq.n	800172e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800171a:	2201      	movs	r2, #1
 800171c:	409a      	lsls	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001726:	f043 0202 	orr.w	r2, r3, #2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001732:	2204      	movs	r2, #4
 8001734:	409a      	lsls	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d012      	beq.n	8001764 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00b      	beq.n	8001764 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001750:	2204      	movs	r2, #4
 8001752:	409a      	lsls	r2, r3
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800175c:	f043 0204 	orr.w	r2, r3, #4
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001768:	2210      	movs	r2, #16
 800176a:	409a      	lsls	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d043      	beq.n	80017fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d03c      	beq.n	80017fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001786:	2210      	movs	r2, #16
 8001788:	409a      	lsls	r2, r3
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d018      	beq.n	80017ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d108      	bne.n	80017bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d024      	beq.n	80017fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	4798      	blx	r3
 80017ba:	e01f      	b.n	80017fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01b      	beq.n	80017fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	4798      	blx	r3
 80017cc:	e016      	b.n	80017fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d107      	bne.n	80017ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0208 	bic.w	r2, r2, #8
 80017ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	2220      	movs	r2, #32
 8001802:	409a      	lsls	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 808f 	beq.w	800192c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0310 	and.w	r3, r3, #16
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 8087 	beq.w	800192c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001822:	2220      	movs	r2, #32
 8001824:	409a      	lsls	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b05      	cmp	r3, #5
 8001834:	d136      	bne.n	80018a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0216 	bic.w	r2, r2, #22
 8001844:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001854:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	2b00      	cmp	r3, #0
 800185c:	d103      	bne.n	8001866 <HAL_DMA_IRQHandler+0x1da>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001862:	2b00      	cmp	r3, #0
 8001864:	d007      	beq.n	8001876 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0208 	bic.w	r2, r2, #8
 8001874:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187a:	223f      	movs	r2, #63	@ 0x3f
 800187c:	409a      	lsls	r2, r3
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001896:	2b00      	cmp	r3, #0
 8001898:	d07e      	beq.n	8001998 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	4798      	blx	r3
        }
        return;
 80018a2:	e079      	b.n	8001998 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d01d      	beq.n	80018ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10d      	bne.n	80018dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d031      	beq.n	800192c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	4798      	blx	r3
 80018d0:	e02c      	b.n	800192c <HAL_DMA_IRQHandler+0x2a0>
 80018d2:	bf00      	nop
 80018d4:	20000008 	.word	0x20000008
 80018d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d023      	beq.n	800192c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	4798      	blx	r3
 80018ec:	e01e      	b.n	800192c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10f      	bne.n	800191c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0210 	bic.w	r2, r2, #16
 800190a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001930:	2b00      	cmp	r3, #0
 8001932:	d032      	beq.n	800199a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d022      	beq.n	8001986 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2205      	movs	r2, #5
 8001944:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	3301      	adds	r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	429a      	cmp	r2, r3
 8001962:	d307      	bcc.n	8001974 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f2      	bne.n	8001958 <HAL_DMA_IRQHandler+0x2cc>
 8001972:	e000      	b.n	8001976 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001974:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	4798      	blx	r3
 8001996:	e000      	b.n	800199a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001998:	bf00      	nop
    }
  }
}
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80019bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b40      	cmp	r3, #64	@ 0x40
 80019cc:	d108      	bne.n	80019e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019de:	e007      	b.n	80019f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	3b10      	subs	r3, #16
 8001a0c:	4a14      	ldr	r2, [pc, #80]	@ (8001a60 <DMA_CalcBaseAndBitshift+0x64>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a16:	4a13      	ldr	r2, [pc, #76]	@ (8001a64 <DMA_CalcBaseAndBitshift+0x68>)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d909      	bls.n	8001a3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a32:	f023 0303 	bic.w	r3, r3, #3
 8001a36:	1d1a      	adds	r2, r3, #4
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a3c:	e007      	b.n	8001a4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a46:	f023 0303 	bic.w	r3, r3, #3
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	aaaaaaab 	.word	0xaaaaaaab
 8001a64:	080044d8 	.word	0x080044d8

08001a68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d11f      	bne.n	8001ac2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d856      	bhi.n	8001b36 <DMA_CheckFifoParam+0xce>
 8001a88:	a201      	add	r2, pc, #4	@ (adr r2, 8001a90 <DMA_CheckFifoParam+0x28>)
 8001a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8e:	bf00      	nop
 8001a90:	08001aa1 	.word	0x08001aa1
 8001a94:	08001ab3 	.word	0x08001ab3
 8001a98:	08001aa1 	.word	0x08001aa1
 8001a9c:	08001b37 	.word	0x08001b37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d046      	beq.n	8001b3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab0:	e043      	b.n	8001b3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001aba:	d140      	bne.n	8001b3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ac0:	e03d      	b.n	8001b3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aca:	d121      	bne.n	8001b10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d837      	bhi.n	8001b42 <DMA_CheckFifoParam+0xda>
 8001ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad8 <DMA_CheckFifoParam+0x70>)
 8001ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad8:	08001ae9 	.word	0x08001ae9
 8001adc:	08001aef 	.word	0x08001aef
 8001ae0:	08001ae9 	.word	0x08001ae9
 8001ae4:	08001b01 	.word	0x08001b01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
      break;
 8001aec:	e030      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d025      	beq.n	8001b46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001afe:	e022      	b.n	8001b46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b08:	d11f      	bne.n	8001b4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b0e:	e01c      	b.n	8001b4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d903      	bls.n	8001b1e <DMA_CheckFifoParam+0xb6>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d003      	beq.n	8001b24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b1c:	e018      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
      break;
 8001b22:	e015      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00e      	beq.n	8001b4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
      break;
 8001b34:	e00b      	b.n	8001b4e <DMA_CheckFifoParam+0xe6>
      break;
 8001b36:	bf00      	nop
 8001b38:	e00a      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      break;
 8001b3a:	bf00      	nop
 8001b3c:	e008      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      break;
 8001b3e:	bf00      	nop
 8001b40:	e006      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      break;
 8001b42:	bf00      	nop
 8001b44:	e004      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      break;
 8001b46:	bf00      	nop
 8001b48:	e002      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b4a:	bf00      	nop
 8001b4c:	e000      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      break;
 8001b4e:	bf00      	nop
    }
  } 
  
  return status; 
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e159      	b.n	8001e30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	f040 8148 	bne.w	8001e2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d005      	beq.n	8001bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d130      	bne.n	8001c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be8:	2201      	movs	r2, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 0201 	and.w	r2, r3, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d017      	beq.n	8001c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d123      	bne.n	8001ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	08da      	lsrs	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3208      	adds	r2, #8
 8001c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	220f      	movs	r2, #15
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	69b9      	ldr	r1, [r7, #24]
 8001ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0203 	and.w	r2, r3, #3
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80a2 	beq.w	8001e2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b57      	ldr	r3, [pc, #348]	@ (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	4a56      	ldr	r2, [pc, #344]	@ (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf6:	4b54      	ldr	r3, [pc, #336]	@ (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d02:	4a52      	ldr	r2, [pc, #328]	@ (8001e4c <HAL_GPIO_Init+0x2ec>)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a49      	ldr	r2, [pc, #292]	@ (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d019      	beq.n	8001d62 <HAL_GPIO_Init+0x202>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a48      	ldr	r2, [pc, #288]	@ (8001e54 <HAL_GPIO_Init+0x2f4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0x1fe>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a47      	ldr	r2, [pc, #284]	@ (8001e58 <HAL_GPIO_Init+0x2f8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00d      	beq.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a46      	ldr	r2, [pc, #280]	@ (8001e5c <HAL_GPIO_Init+0x2fc>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x1f6>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a45      	ldr	r2, [pc, #276]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_GPIO_Init+0x1f2>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	e008      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d56:	2303      	movs	r3, #3
 8001d58:	e004      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e002      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d62:	2300      	movs	r3, #0
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	f002 0203 	and.w	r2, r2, #3
 8001d6a:	0092      	lsls	r2, r2, #2
 8001d6c:	4093      	lsls	r3, r2
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d74:	4935      	ldr	r1, [pc, #212]	@ (8001e4c <HAL_GPIO_Init+0x2ec>)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d82:	4b38      	ldr	r3, [pc, #224]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da6:	4a2f      	ldr	r2, [pc, #188]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dac:	4b2d      	ldr	r3, [pc, #180]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd0:	4a24      	ldr	r2, [pc, #144]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd6:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e24:	4a0f      	ldr	r2, [pc, #60]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b0f      	cmp	r3, #15
 8001e34:	f67f aea2 	bls.w	8001b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3724      	adds	r7, #36	@ 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40020c00 	.word	0x40020c00
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e12b      	b.n	80020d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe ff62 	bl	8000d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2224      	movs	r2, #36	@ 0x24
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ecc:	f001 fe5a 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 8001ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a81      	ldr	r2, [pc, #516]	@ (80020dc <HAL_I2C_Init+0x274>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d807      	bhi.n	8001eec <HAL_I2C_Init+0x84>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a80      	ldr	r2, [pc, #512]	@ (80020e0 <HAL_I2C_Init+0x278>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	bf94      	ite	ls
 8001ee4:	2301      	movls	r3, #1
 8001ee6:	2300      	movhi	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	e006      	b.n	8001efa <HAL_I2C_Init+0x92>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4a7d      	ldr	r2, [pc, #500]	@ (80020e4 <HAL_I2C_Init+0x27c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	bf94      	ite	ls
 8001ef4:	2301      	movls	r3, #1
 8001ef6:	2300      	movhi	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0e7      	b.n	80020d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4a78      	ldr	r2, [pc, #480]	@ (80020e8 <HAL_I2C_Init+0x280>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9b      	lsrs	r3, r3, #18
 8001f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a6a      	ldr	r2, [pc, #424]	@ (80020dc <HAL_I2C_Init+0x274>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d802      	bhi.n	8001f3c <HAL_I2C_Init+0xd4>
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	e009      	b.n	8001f50 <HAL_I2C_Init+0xe8>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	4a69      	ldr	r2, [pc, #420]	@ (80020ec <HAL_I2C_Init+0x284>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	3301      	adds	r3, #1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	495c      	ldr	r1, [pc, #368]	@ (80020dc <HAL_I2C_Init+0x274>)
 8001f6c:	428b      	cmp	r3, r1
 8001f6e:	d819      	bhi.n	8001fa4 <HAL_I2C_Init+0x13c>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e59      	subs	r1, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f7e:	1c59      	adds	r1, r3, #1
 8001f80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f84:	400b      	ands	r3, r1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <HAL_I2C_Init+0x138>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1e59      	subs	r1, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9e:	e051      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	e04f      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d111      	bne.n	8001fd0 <HAL_I2C_Init+0x168>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1e58      	subs	r0, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	e012      	b.n	8001ff6 <HAL_I2C_Init+0x18e>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1e58      	subs	r0, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	0099      	lsls	r1, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Init+0x196>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e022      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10e      	bne.n	8002024 <HAL_I2C_Init+0x1bc>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1e58      	subs	r0, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6859      	ldr	r1, [r3, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	440b      	add	r3, r1
 8002014:	fbb0 f3f3 	udiv	r3, r0, r3
 8002018:	3301      	adds	r3, #1
 800201a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002022:	e00f      	b.n	8002044 <HAL_I2C_Init+0x1dc>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1e58      	subs	r0, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	0099      	lsls	r1, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	fbb0 f3f3 	udiv	r3, r0, r3
 800203a:	3301      	adds	r3, #1
 800203c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002040:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	6809      	ldr	r1, [r1, #0]
 8002048:	4313      	orrs	r3, r2
 800204a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69da      	ldr	r2, [r3, #28]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002072:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6911      	ldr	r1, [r2, #16]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68d2      	ldr	r2, [r2, #12]
 800207e:	4311      	orrs	r1, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	430b      	orrs	r3, r1
 8002086:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	000186a0 	.word	0x000186a0
 80020e0:	001e847f 	.word	0x001e847f
 80020e4:	003d08ff 	.word	0x003d08ff
 80020e8:	431bde83 	.word	0x431bde83
 80020ec:	10624dd3 	.word	0x10624dd3

080020f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	4608      	mov	r0, r1
 80020fa:	4611      	mov	r1, r2
 80020fc:	461a      	mov	r2, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	817b      	strh	r3, [r7, #10]
 8002102:	460b      	mov	r3, r1
 8002104:	813b      	strh	r3, [r7, #8]
 8002106:	4613      	mov	r3, r2
 8002108:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800210a:	f7ff f877 	bl	80011fc <HAL_GetTick>
 800210e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b20      	cmp	r3, #32
 800211a:	f040 80d9 	bne.w	80022d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2319      	movs	r3, #25
 8002124:	2201      	movs	r2, #1
 8002126:	496d      	ldr	r1, [pc, #436]	@ (80022dc <HAL_I2C_Mem_Write+0x1ec>)
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 f971 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002134:	2302      	movs	r3, #2
 8002136:	e0cc      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_I2C_Mem_Write+0x56>
 8002142:	2302      	movs	r3, #2
 8002144:	e0c5      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d007      	beq.n	800216c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800217a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2221      	movs	r2, #33	@ 0x21
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2240      	movs	r2, #64	@ 0x40
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a3a      	ldr	r2, [r7, #32]
 8002196:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800219c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4a4d      	ldr	r2, [pc, #308]	@ (80022e0 <HAL_I2C_Mem_Write+0x1f0>)
 80021ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021ae:	88f8      	ldrh	r0, [r7, #6]
 80021b0:	893a      	ldrh	r2, [r7, #8]
 80021b2:	8979      	ldrh	r1, [r7, #10]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	4603      	mov	r3, r0
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f890 	bl	80022e4 <I2C_RequestMemoryWrite>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d052      	beq.n	8002270 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e081      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fa36 	bl	8002644 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d107      	bne.n	80021f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e06b      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b04      	cmp	r3, #4
 8002236:	d11b      	bne.n	8002270 <HAL_I2C_Mem_Write+0x180>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	d017      	beq.n	8002270 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1aa      	bne.n	80021ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fa29 	bl	80026d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00d      	beq.n	80022a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	2b04      	cmp	r3, #4
 800228e:	d107      	bne.n	80022a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800229e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e016      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	00100002 	.word	0x00100002
 80022e0:	ffff0000 	.word	0xffff0000

080022e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	4608      	mov	r0, r1
 80022ee:	4611      	mov	r1, r2
 80022f0:	461a      	mov	r2, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	817b      	strh	r3, [r7, #10]
 80022f6:	460b      	mov	r3, r1
 80022f8:	813b      	strh	r3, [r7, #8]
 80022fa:	4613      	mov	r3, r2
 80022fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800230c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	2200      	movs	r2, #0
 8002316:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f878 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00d      	beq.n	8002342 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002330:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002334:	d103      	bne.n	800233e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800233c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e05f      	b.n	8002402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002342:	897b      	ldrh	r3, [r7, #10]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002350:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	6a3a      	ldr	r2, [r7, #32]
 8002356:	492d      	ldr	r1, [pc, #180]	@ (800240c <I2C_RequestMemoryWrite+0x128>)
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f8d3 	bl	8002504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e04c      	b.n	8002402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800237e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002380:	6a39      	ldr	r1, [r7, #32]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f95e 	bl	8002644 <I2C_WaitOnTXEFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	2b04      	cmp	r3, #4
 8002394:	d107      	bne.n	80023a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e02b      	b.n	8002402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023b0:	893b      	ldrh	r3, [r7, #8]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	611a      	str	r2, [r3, #16]
 80023ba:	e021      	b.n	8002400 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023bc:	893b      	ldrh	r3, [r7, #8]
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023cc:	6a39      	ldr	r1, [r7, #32]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f938 	bl	8002644 <I2C_WaitOnTXEFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d107      	bne.n	80023f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e005      	b.n	8002402 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023f6:	893b      	ldrh	r3, [r7, #8]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	00010002 	.word	0x00010002

08002410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002420:	e048      	b.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d044      	beq.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7fe fee7 	bl	80011fc <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d139      	bne.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	0c1b      	lsrs	r3, r3, #16
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d10d      	bne.n	8002466 <I2C_WaitOnFlagUntilTimeout+0x56>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	43da      	mvns	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4013      	ands	r3, r2
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf0c      	ite	eq
 800245c:	2301      	moveq	r3, #1
 800245e:	2300      	movne	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	e00c      	b.n	8002480 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	43da      	mvns	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4013      	ands	r3, r2
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	429a      	cmp	r2, r3
 8002484:	d116      	bne.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	f043 0220 	orr.w	r2, r3, #32
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e023      	b.n	80024fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d10d      	bne.n	80024da <I2C_WaitOnFlagUntilTimeout+0xca>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	43da      	mvns	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	4013      	ands	r3, r2
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	e00c      	b.n	80024f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	43da      	mvns	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	4013      	ands	r3, r2
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d093      	beq.n	8002422 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002512:	e071      	b.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002522:	d123      	bne.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002532:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800253c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f043 0204 	orr.w	r2, r3, #4
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e067      	b.n	800263c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002572:	d041      	beq.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002574:	f7fe fe42 	bl	80011fc <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	d302      	bcc.n	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d136      	bne.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d10c      	bne.n	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4013      	ands	r3, r2
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf14      	ite	ne
 80025a6:	2301      	movne	r3, #1
 80025a8:	2300      	moveq	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	e00b      	b.n	80025c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	43da      	mvns	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	4013      	ands	r3, r2
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	f043 0220 	orr.w	r2, r3, #32
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e021      	b.n	800263c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	0c1b      	lsrs	r3, r3, #16
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d10c      	bne.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	43da      	mvns	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	4013      	ands	r3, r2
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	e00b      	b.n	8002634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	43da      	mvns	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4013      	ands	r3, r2
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	f47f af6d 	bne.w	8002514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002650:	e034      	b.n	80026bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f886 	bl	8002764 <I2C_IsAcknowledgeFailed>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e034      	b.n	80026cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d028      	beq.n	80026bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266a:	f7fe fdc7 	bl	80011fc <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	429a      	cmp	r2, r3
 8002678:	d302      	bcc.n	8002680 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d11d      	bne.n	80026bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268a:	2b80      	cmp	r3, #128	@ 0x80
 800268c:	d016      	beq.n	80026bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e007      	b.n	80026cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c6:	2b80      	cmp	r3, #128	@ 0x80
 80026c8:	d1c3      	bne.n	8002652 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026e0:	e034      	b.n	800274c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f83e 	bl	8002764 <I2C_IsAcknowledgeFailed>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e034      	b.n	800275c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d028      	beq.n	800274c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fa:	f7fe fd7f 	bl	80011fc <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11d      	bne.n	800274c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b04      	cmp	r3, #4
 800271c:	d016      	beq.n	800274c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	f043 0220 	orr.w	r2, r3, #32
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e007      	b.n	800275c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b04      	cmp	r3, #4
 8002758:	d1c3      	bne.n	80026e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800277a:	d11b      	bne.n	80027b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002784:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	f043 0204 	orr.w	r2, r3, #4
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e128      	b.n	8002a28 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a90      	ldr	r2, [pc, #576]	@ (8002a30 <HAL_I2S_Init+0x26c>)
 80027ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7fe faf9 	bl	8000de8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800280c:	f023 030f 	bic.w	r3, r3, #15
 8002810:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2202      	movs	r2, #2
 8002818:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d060      	beq.n	80028e4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d102      	bne.n	8002830 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800282a:	2310      	movs	r3, #16
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	e001      	b.n	8002834 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002830:	2320      	movs	r3, #32
 8002832:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b20      	cmp	r3, #32
 800283a:	d802      	bhi.n	8002842 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002842:	2001      	movs	r0, #1
 8002844:	f001 faa2 	bl	8003d8c <HAL_RCCEx_GetPeriphCLKFreq>
 8002848:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002852:	d125      	bne.n	80028a0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d010      	beq.n	800287e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	fbb2 f2f3 	udiv	r2, r2, r3
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	461a      	mov	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	fbb2 f3f3 	udiv	r3, r2, r3
 8002878:	3305      	adds	r3, #5
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	e01f      	b.n	80028be <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	fbb2 f2f3 	udiv	r2, r2, r3
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	461a      	mov	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	3305      	adds	r3, #5
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	e00e      	b.n	80028be <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	461a      	mov	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	3305      	adds	r3, #5
 80028bc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4a5c      	ldr	r2, [pc, #368]	@ (8002a34 <HAL_I2S_Init+0x270>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	08db      	lsrs	r3, r3, #3
 80028c8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	e003      	b.n	80028ec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80028e4:	2302      	movs	r3, #2
 80028e6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d902      	bls.n	80028f8 <HAL_I2S_Init+0x134>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	2bff      	cmp	r3, #255	@ 0xff
 80028f6:	d907      	bls.n	8002908 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fc:	f043 0210 	orr.w	r2, r3, #16
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e08f      	b.n	8002a28 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	ea42 0103 	orr.w	r1, r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	430a      	orrs	r2, r1
 800291a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002926:	f023 030f 	bic.w	r3, r3, #15
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6851      	ldr	r1, [r2, #4]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6892      	ldr	r2, [r2, #8]
 8002932:	4311      	orrs	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	68d2      	ldr	r2, [r2, #12]
 8002938:	4311      	orrs	r1, r2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6992      	ldr	r2, [r2, #24]
 800293e:	430a      	orrs	r2, r1
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800294a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d161      	bne.n	8002a18 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a38      	ldr	r2, [pc, #224]	@ (8002a38 <HAL_I2S_Init+0x274>)
 8002958:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a37      	ldr	r2, [pc, #220]	@ (8002a3c <HAL_I2S_Init+0x278>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d101      	bne.n	8002968 <HAL_I2S_Init+0x1a4>
 8002964:	4b36      	ldr	r3, [pc, #216]	@ (8002a40 <HAL_I2S_Init+0x27c>)
 8002966:	e001      	b.n	800296c <HAL_I2S_Init+0x1a8>
 8002968:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	4932      	ldr	r1, [pc, #200]	@ (8002a3c <HAL_I2S_Init+0x278>)
 8002974:	428a      	cmp	r2, r1
 8002976:	d101      	bne.n	800297c <HAL_I2S_Init+0x1b8>
 8002978:	4a31      	ldr	r2, [pc, #196]	@ (8002a40 <HAL_I2S_Init+0x27c>)
 800297a:	e001      	b.n	8002980 <HAL_I2S_Init+0x1bc>
 800297c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002980:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002984:	f023 030f 	bic.w	r3, r3, #15
 8002988:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a3c <HAL_I2S_Init+0x278>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d101      	bne.n	8002998 <HAL_I2S_Init+0x1d4>
 8002994:	4b2a      	ldr	r3, [pc, #168]	@ (8002a40 <HAL_I2S_Init+0x27c>)
 8002996:	e001      	b.n	800299c <HAL_I2S_Init+0x1d8>
 8002998:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800299c:	2202      	movs	r2, #2
 800299e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a25      	ldr	r2, [pc, #148]	@ (8002a3c <HAL_I2S_Init+0x278>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <HAL_I2S_Init+0x1ea>
 80029aa:	4b25      	ldr	r3, [pc, #148]	@ (8002a40 <HAL_I2S_Init+0x27c>)
 80029ac:	e001      	b.n	80029b2 <HAL_I2S_Init+0x1ee>
 80029ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029be:	d003      	beq.n	80029c8 <HAL_I2S_Init+0x204>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d103      	bne.n	80029d0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80029c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	e001      	b.n	80029d4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029de:	4313      	orrs	r3, r2
 80029e0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029e8:	4313      	orrs	r3, r2
 80029ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80029f2:	4313      	orrs	r3, r2
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a00:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a0d      	ldr	r2, [pc, #52]	@ (8002a3c <HAL_I2S_Init+0x278>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d101      	bne.n	8002a10 <HAL_I2S_Init+0x24c>
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <HAL_I2S_Init+0x27c>)
 8002a0e:	e001      	b.n	8002a14 <HAL_I2S_Init+0x250>
 8002a10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a14:	897a      	ldrh	r2, [r7, #10]
 8002a16:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3720      	adds	r7, #32
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	08002d5d 	.word	0x08002d5d
 8002a34:	cccccccd 	.word	0xcccccccd
 8002a38:	08002e71 	.word	0x08002e71
 8002a3c:	40003800 	.word	0x40003800
 8002a40:	40003400 	.word	0x40003400

08002a44 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <HAL_I2S_Receive_DMA+0x1a>
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0a1      	b.n	8002ba6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2S_Receive_DMA+0x2e>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e099      	b.n	8002ba6 <HAL_I2S_Receive_DMA+0x162>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d005      	beq.n	8002a92 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e089      	b.n	8002ba6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2204      	movs	r2, #4
 8002a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d002      	beq.n	8002abe <HAL_I2S_Receive_DMA+0x7a>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d10a      	bne.n	8002ad4 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002ad2:	e005      	b.n	8002ae0 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae4:	4a32      	ldr	r2, [pc, #200]	@ (8002bb0 <HAL_I2S_Receive_DMA+0x16c>)
 8002ae6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aec:	4a31      	ldr	r2, [pc, #196]	@ (8002bb4 <HAL_I2S_Receive_DMA+0x170>)
 8002aee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af4:	4a30      	ldr	r2, [pc, #192]	@ (8002bb8 <HAL_I2S_Receive_DMA+0x174>)
 8002af6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b06:	d10a      	bne.n	8002b1e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	330c      	adds	r3, #12
 8002b28:	4619      	mov	r1, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002b34:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002b36:	f7fe fd51 	bl	80015dc <HAL_DMA_Start_IT>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00f      	beq.n	8002b60 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b44:	f043 0208 	orr.w	r2, r3, #8
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e022      	b.n	8002ba6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d107      	bne.n	8002b7e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b7c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d107      	bne.n	8002b9c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	08002c3b 	.word	0x08002c3b
 8002bb4:	08002bf9 	.word	0x08002bf9
 8002bb8:	08002c57 	.word	0x08002c57

08002bbc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c04:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10e      	bne.n	8002c2c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f7fd fc4b 	bl	80004c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff ffc1 	bl	8002bd0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c4e:	bf00      	nop
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0203 	bic.w	r2, r2, #3
 8002c72:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8c:	f043 0208 	orr.w	r2, r3, #8
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7ff ffa5 	bl	8002be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cae:	881a      	ldrh	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	1c9a      	adds	r2, r3, #2
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10e      	bne.n	8002cf6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ce6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff ff63 	bl	8002bbc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	b292      	uxth	r2, r2
 8002d12:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d18:	1c9a      	adds	r2, r3, #2
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10e      	bne.n	8002d54 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d44:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fd fbba 	bl	80004c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d13a      	bne.n	8002dee <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d109      	bne.n	8002d96 <I2S_IRQHandler+0x3a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d8c:	2b40      	cmp	r3, #64	@ 0x40
 8002d8e:	d102      	bne.n	8002d96 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ffb4 	bl	8002cfe <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9c:	2b40      	cmp	r3, #64	@ 0x40
 8002d9e:	d126      	bne.n	8002dee <I2S_IRQHandler+0x92>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d11f      	bne.n	8002dee <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002dbc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de0:	f043 0202 	orr.w	r2, r3, #2
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff fefb 	bl	8002be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d136      	bne.n	8002e68 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d109      	bne.n	8002e18 <I2S_IRQHandler+0xbc>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0e:	2b80      	cmp	r3, #128	@ 0x80
 8002e10:	d102      	bne.n	8002e18 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff ff45 	bl	8002ca2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d122      	bne.n	8002e68 <I2S_IRQHandler+0x10c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d11b      	bne.n	8002e68 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e3e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff febe 	bl	8002be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e68:	bf00      	nop
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a92      	ldr	r2, [pc, #584]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d101      	bne.n	8002e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002e8a:	4b92      	ldr	r3, [pc, #584]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e8c:	e001      	b.n	8002e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002e8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a8b      	ldr	r2, [pc, #556]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d101      	bne.n	8002eac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ea8:	4b8a      	ldr	r3, [pc, #552]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002eaa:	e001      	b.n	8002eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002eac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ebc:	d004      	beq.n	8002ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 8099 	bne.w	8002ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d107      	bne.n	8002ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f925 	bl	800312c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d107      	bne.n	8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f9c8 	bl	800328c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f02:	2b40      	cmp	r3, #64	@ 0x40
 8002f04:	d13a      	bne.n	8002f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d035      	beq.n	8002f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a6e      	ldr	r2, [pc, #440]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002f1a:	4b6e      	ldr	r3, [pc, #440]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f1c:	e001      	b.n	8002f22 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002f1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4969      	ldr	r1, [pc, #420]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f2a:	428b      	cmp	r3, r1
 8002f2c:	d101      	bne.n	8002f32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002f2e:	4b69      	ldr	r3, [pc, #420]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f30:	e001      	b.n	8002f36 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002f32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f36:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f3a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f4a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	f043 0202 	orr.w	r2, r3, #2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff fe34 	bl	8002be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	f040 80c3 	bne.w	800310e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 80bd 	beq.w	800310e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002fa2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a49      	ldr	r2, [pc, #292]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d101      	bne.n	8002fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002fae:	4b49      	ldr	r3, [pc, #292]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fb0:	e001      	b.n	8002fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002fb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4944      	ldr	r1, [pc, #272]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fbe:	428b      	cmp	r3, r1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002fc2:	4b44      	ldr	r3, [pc, #272]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fc4:	e001      	b.n	8002fca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002fc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002fce:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff fdf6 	bl	8002be4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ff8:	e089      	b.n	800310e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d107      	bne.n	8003014 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8be 	bl	8003190 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d107      	bne.n	800302e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f8fd 	bl	8003228 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003034:	2b40      	cmp	r3, #64	@ 0x40
 8003036:	d12f      	bne.n	8003098 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d02a      	beq.n	8003098 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003050:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1e      	ldr	r2, [pc, #120]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d101      	bne.n	8003060 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800305c:	4b1d      	ldr	r3, [pc, #116]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800305e:	e001      	b.n	8003064 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003060:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4919      	ldr	r1, [pc, #100]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800306c:	428b      	cmp	r3, r1
 800306e:	d101      	bne.n	8003074 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003070:	4b18      	ldr	r3, [pc, #96]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003072:	e001      	b.n	8003078 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003074:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003078:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800307c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	f043 0202 	orr.w	r2, r3, #2
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff fda6 	bl	8002be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d136      	bne.n	8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d031      	beq.n	8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a07      	ldr	r2, [pc, #28]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d101      	bne.n	80030ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80030b6:	4b07      	ldr	r3, [pc, #28]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030b8:	e001      	b.n	80030be <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80030ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4902      	ldr	r1, [pc, #8]	@ (80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030c6:	428b      	cmp	r3, r1
 80030c8:	d106      	bne.n	80030d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80030ca:	4b02      	ldr	r3, [pc, #8]	@ (80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030cc:	e006      	b.n	80030dc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80030ce:	bf00      	nop
 80030d0:	40003800 	.word	0x40003800
 80030d4:	40003400 	.word	0x40003400
 80030d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80030e0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80030f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	f043 0204 	orr.w	r2, r3, #4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff fd6c 	bl	8002be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800310c:	e000      	b.n	8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800310e:	bf00      	nop
}
 8003110:	bf00      	nop
 8003112:	3720      	adds	r7, #32
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	1c99      	adds	r1, r3, #2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6251      	str	r1, [r2, #36]	@ 0x24
 800313e:	881a      	ldrh	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d113      	bne.n	8003186 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800316c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d106      	bne.n	8003186 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ffc9 	bl	8003118 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	1c99      	adds	r1, r3, #2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6251      	str	r1, [r2, #36]	@ 0x24
 80031a2:	8819      	ldrh	r1, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003220 <I2SEx_TxISR_I2SExt+0x90>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d101      	bne.n	80031b2 <I2SEx_TxISR_I2SExt+0x22>
 80031ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <I2SEx_TxISR_I2SExt+0x94>)
 80031b0:	e001      	b.n	80031b6 <I2SEx_TxISR_I2SExt+0x26>
 80031b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031b6:	460a      	mov	r2, r1
 80031b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d121      	bne.n	8003216 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a12      	ldr	r2, [pc, #72]	@ (8003220 <I2SEx_TxISR_I2SExt+0x90>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <I2SEx_TxISR_I2SExt+0x50>
 80031dc:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <I2SEx_TxISR_I2SExt+0x94>)
 80031de:	e001      	b.n	80031e4 <I2SEx_TxISR_I2SExt+0x54>
 80031e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	490d      	ldr	r1, [pc, #52]	@ (8003220 <I2SEx_TxISR_I2SExt+0x90>)
 80031ec:	428b      	cmp	r3, r1
 80031ee:	d101      	bne.n	80031f4 <I2SEx_TxISR_I2SExt+0x64>
 80031f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <I2SEx_TxISR_I2SExt+0x94>)
 80031f2:	e001      	b.n	80031f8 <I2SEx_TxISR_I2SExt+0x68>
 80031f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80031fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ff81 	bl	8003118 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40003800 	.word	0x40003800
 8003224:	40003400 	.word	0x40003400

08003228 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68d8      	ldr	r0, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323a:	1c99      	adds	r1, r3, #2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003240:	b282      	uxth	r2, r0
 8003242:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d113      	bne.n	8003284 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800326a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff ff4a 	bl	8003118 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a20      	ldr	r2, [pc, #128]	@ (800331c <I2SEx_RxISR_I2SExt+0x90>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <I2SEx_RxISR_I2SExt+0x16>
 800329e:	4b20      	ldr	r3, [pc, #128]	@ (8003320 <I2SEx_RxISR_I2SExt+0x94>)
 80032a0:	e001      	b.n	80032a6 <I2SEx_RxISR_I2SExt+0x1a>
 80032a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032a6:	68d8      	ldr	r0, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	1c99      	adds	r1, r3, #2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80032b2:	b282      	uxth	r2, r0
 80032b4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d121      	bne.n	8003312 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a12      	ldr	r2, [pc, #72]	@ (800331c <I2SEx_RxISR_I2SExt+0x90>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d101      	bne.n	80032dc <I2SEx_RxISR_I2SExt+0x50>
 80032d8:	4b11      	ldr	r3, [pc, #68]	@ (8003320 <I2SEx_RxISR_I2SExt+0x94>)
 80032da:	e001      	b.n	80032e0 <I2SEx_RxISR_I2SExt+0x54>
 80032dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	490d      	ldr	r1, [pc, #52]	@ (800331c <I2SEx_RxISR_I2SExt+0x90>)
 80032e8:	428b      	cmp	r3, r1
 80032ea:	d101      	bne.n	80032f0 <I2SEx_RxISR_I2SExt+0x64>
 80032ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <I2SEx_RxISR_I2SExt+0x94>)
 80032ee:	e001      	b.n	80032f4 <I2SEx_RxISR_I2SExt+0x68>
 80032f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032f8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d106      	bne.n	8003312 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff03 	bl	8003118 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40003800 	.word	0x40003800
 8003320:	40003400 	.word	0x40003400

08003324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e267      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d075      	beq.n	800342e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003342:	4b88      	ldr	r3, [pc, #544]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b04      	cmp	r3, #4
 800334c:	d00c      	beq.n	8003368 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334e:	4b85      	ldr	r3, [pc, #532]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003356:	2b08      	cmp	r3, #8
 8003358:	d112      	bne.n	8003380 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335a:	4b82      	ldr	r3, [pc, #520]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003366:	d10b      	bne.n	8003380 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	4b7e      	ldr	r3, [pc, #504]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d05b      	beq.n	800342c <HAL_RCC_OscConfig+0x108>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d157      	bne.n	800342c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e242      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003388:	d106      	bne.n	8003398 <HAL_RCC_OscConfig+0x74>
 800338a:	4b76      	ldr	r3, [pc, #472]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a75      	ldr	r2, [pc, #468]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e01d      	b.n	80033d4 <HAL_RCC_OscConfig+0xb0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x98>
 80033a2:	4b70      	ldr	r3, [pc, #448]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6f      	ldr	r2, [pc, #444]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a6c      	ldr	r2, [pc, #432]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0xb0>
 80033bc:	4b69      	ldr	r3, [pc, #420]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a68      	ldr	r2, [pc, #416]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b66      	ldr	r3, [pc, #408]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a65      	ldr	r2, [pc, #404]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d013      	beq.n	8003404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fd ff0e 	bl	80011fc <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fd ff0a 	bl	80011fc <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	@ 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e207      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0xc0>
 8003402:	e014      	b.n	800342e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fd fefa 	bl	80011fc <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340c:	f7fd fef6 	bl	80011fc <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	@ 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e1f3      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341e:	4b51      	ldr	r3, [pc, #324]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0xe8>
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d063      	beq.n	8003502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800343a:	4b4a      	ldr	r3, [pc, #296]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003446:	4b47      	ldr	r3, [pc, #284]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800344e:	2b08      	cmp	r3, #8
 8003450:	d11c      	bne.n	800348c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003452:	4b44      	ldr	r3, [pc, #272]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d116      	bne.n	800348c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	4b41      	ldr	r3, [pc, #260]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_RCC_OscConfig+0x152>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d001      	beq.n	8003476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e1c7      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003476:	4b3b      	ldr	r3, [pc, #236]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4937      	ldr	r1, [pc, #220]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348a:	e03a      	b.n	8003502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d020      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003494:	4b34      	ldr	r3, [pc, #208]	@ (8003568 <HAL_RCC_OscConfig+0x244>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fd feaf 	bl	80011fc <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a2:	f7fd feab 	bl	80011fc <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e1a8      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c0:	4b28      	ldr	r3, [pc, #160]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4925      	ldr	r1, [pc, #148]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	600b      	str	r3, [r1, #0]
 80034d4:	e015      	b.n	8003502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d6:	4b24      	ldr	r3, [pc, #144]	@ (8003568 <HAL_RCC_OscConfig+0x244>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fd fe8e 	bl	80011fc <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e4:	f7fd fe8a 	bl	80011fc <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e187      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d036      	beq.n	800357c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003516:	4b15      	ldr	r3, [pc, #84]	@ (800356c <HAL_RCC_OscConfig+0x248>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fd fe6e 	bl	80011fc <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003524:	f7fd fe6a 	bl	80011fc <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e167      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003536:	4b0b      	ldr	r3, [pc, #44]	@ (8003564 <HAL_RCC_OscConfig+0x240>)
 8003538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x200>
 8003542:	e01b      	b.n	800357c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003544:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_RCC_OscConfig+0x248>)
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354a:	f7fd fe57 	bl	80011fc <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003550:	e00e      	b.n	8003570 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003552:	f7fd fe53 	bl	80011fc <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d907      	bls.n	8003570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e150      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
 8003564:	40023800 	.word	0x40023800
 8003568:	42470000 	.word	0x42470000
 800356c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	4b88      	ldr	r3, [pc, #544]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ea      	bne.n	8003552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8097 	beq.w	80036b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358e:	4b81      	ldr	r3, [pc, #516]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10f      	bne.n	80035ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	4b7d      	ldr	r3, [pc, #500]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ba:	4b77      	ldr	r3, [pc, #476]	@ (8003798 <HAL_RCC_OscConfig+0x474>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d118      	bne.n	80035f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c6:	4b74      	ldr	r3, [pc, #464]	@ (8003798 <HAL_RCC_OscConfig+0x474>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a73      	ldr	r2, [pc, #460]	@ (8003798 <HAL_RCC_OscConfig+0x474>)
 80035cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d2:	f7fd fe13 	bl	80011fc <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035da:	f7fd fe0f 	bl	80011fc <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e10c      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003798 <HAL_RCC_OscConfig+0x474>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x2ea>
 8003600:	4b64      	ldr	r3, [pc, #400]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003604:	4a63      	ldr	r2, [pc, #396]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6713      	str	r3, [r2, #112]	@ 0x70
 800360c:	e01c      	b.n	8003648 <HAL_RCC_OscConfig+0x324>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b05      	cmp	r3, #5
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x30c>
 8003616:	4b5f      	ldr	r3, [pc, #380]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361a:	4a5e      	ldr	r2, [pc, #376]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	6713      	str	r3, [r2, #112]	@ 0x70
 8003622:	4b5c      	ldr	r3, [pc, #368]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003626:	4a5b      	ldr	r2, [pc, #364]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6713      	str	r3, [r2, #112]	@ 0x70
 800362e:	e00b      	b.n	8003648 <HAL_RCC_OscConfig+0x324>
 8003630:	4b58      	ldr	r3, [pc, #352]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003634:	4a57      	ldr	r2, [pc, #348]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	6713      	str	r3, [r2, #112]	@ 0x70
 800363c:	4b55      	ldr	r3, [pc, #340]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003640:	4a54      	ldr	r2, [pc, #336]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003642:	f023 0304 	bic.w	r3, r3, #4
 8003646:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003650:	f7fd fdd4 	bl	80011fc <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003656:	e00a      	b.n	800366e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fd fdd0 	bl	80011fc <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0cb      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366e:	4b49      	ldr	r3, [pc, #292]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ee      	beq.n	8003658 <HAL_RCC_OscConfig+0x334>
 800367a:	e014      	b.n	80036a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367c:	f7fd fdbe 	bl	80011fc <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7fd fdba 	bl	80011fc <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0b5      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369a:	4b3e      	ldr	r3, [pc, #248]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1ee      	bne.n	8003684 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ac:	4b39      	ldr	r3, [pc, #228]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	4a38      	ldr	r2, [pc, #224]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 80036b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80a1 	beq.w	8003804 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036c2:	4b34      	ldr	r3, [pc, #208]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d05c      	beq.n	8003788 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d141      	bne.n	800375a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d6:	4b31      	ldr	r3, [pc, #196]	@ (800379c <HAL_RCC_OscConfig+0x478>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fd fd8e 	bl	80011fc <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fd fd8a 	bl	80011fc <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e087      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	4b27      	ldr	r3, [pc, #156]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69da      	ldr	r2, [r3, #28]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	019b      	lsls	r3, r3, #6
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	3b01      	subs	r3, #1
 800371c:	041b      	lsls	r3, r3, #16
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	061b      	lsls	r3, r3, #24
 8003726:	491b      	ldr	r1, [pc, #108]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372c:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x478>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fd fd63 	bl	80011fc <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373a:	f7fd fd5f 	bl	80011fc <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e05c      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374c:	4b11      	ldr	r3, [pc, #68]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x416>
 8003758:	e054      	b.n	8003804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b10      	ldr	r3, [pc, #64]	@ (800379c <HAL_RCC_OscConfig+0x478>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fd fd4c 	bl	80011fc <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003768:	f7fd fd48 	bl	80011fc <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e045      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_RCC_OscConfig+0x470>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x444>
 8003786:	e03d      	b.n	8003804 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e038      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
 8003794:	40023800 	.word	0x40023800
 8003798:	40007000 	.word	0x40007000
 800379c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003810 <HAL_RCC_OscConfig+0x4ec>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d028      	beq.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d121      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d11a      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037d0:	4013      	ands	r3, r2
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d8:	4293      	cmp	r3, r2
 80037da:	d111      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	3b01      	subs	r3, #1
 80037ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800

08003814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0cc      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003828:	4b68      	ldr	r3, [pc, #416]	@ (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d90c      	bls.n	8003850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b65      	ldr	r3, [pc, #404]	@ (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b63      	ldr	r3, [pc, #396]	@ (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0b8      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d020      	beq.n	800389e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003868:	4b59      	ldr	r3, [pc, #356]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a58      	ldr	r2, [pc, #352]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003872:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003880:	4b53      	ldr	r3, [pc, #332]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	4a52      	ldr	r2, [pc, #328]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800388a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388c:	4b50      	ldr	r3, [pc, #320]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	494d      	ldr	r1, [pc, #308]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d044      	beq.n	8003934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	4b47      	ldr	r3, [pc, #284]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d119      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e07f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d003      	beq.n	80038d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d2:	4b3f      	ldr	r3, [pc, #252]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e06f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e2:	4b3b      	ldr	r3, [pc, #236]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e067      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038f2:	4b37      	ldr	r3, [pc, #220]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4934      	ldr	r1, [pc, #208]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003904:	f7fd fc7a 	bl	80011fc <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	e00a      	b.n	8003922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390c:	f7fd fc76 	bl	80011fc <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e04f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	4b2b      	ldr	r3, [pc, #172]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 020c 	and.w	r2, r3, #12
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	429a      	cmp	r2, r3
 8003932:	d1eb      	bne.n	800390c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003934:	4b25      	ldr	r3, [pc, #148]	@ (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d20c      	bcs.n	800395c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b22      	ldr	r3, [pc, #136]	@ (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b20      	ldr	r3, [pc, #128]	@ (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e032      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003968:	4b19      	ldr	r3, [pc, #100]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4916      	ldr	r1, [pc, #88]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003986:	4b12      	ldr	r3, [pc, #72]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	490e      	ldr	r1, [pc, #56]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800399a:	f000 f821 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	490a      	ldr	r1, [pc, #40]	@ (80039d4 <HAL_RCC_ClockConfig+0x1c0>)
 80039ac:	5ccb      	ldrb	r3, [r1, r3]
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	4a09      	ldr	r2, [pc, #36]	@ (80039d8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039b6:	4b09      	ldr	r3, [pc, #36]	@ (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd fbda 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023c00 	.word	0x40023c00
 80039d0:	40023800 	.word	0x40023800
 80039d4:	080044c0 	.word	0x080044c0
 80039d8:	20000008 	.word	0x20000008
 80039dc:	2000000c 	.word	0x2000000c

080039e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	b090      	sub	sp, #64	@ 0x40
 80039e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80039ec:	2300      	movs	r3, #0
 80039ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039f0:	2300      	movs	r3, #0
 80039f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f8:	4b59      	ldr	r3, [pc, #356]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x180>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d00d      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x40>
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	f200 80a1 	bhi.w	8003b4c <HAL_RCC_GetSysClockFreq+0x16c>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x34>
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d003      	beq.n	8003a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a12:	e09b      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a14:	4b53      	ldr	r3, [pc, #332]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a16:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003a18:	e09b      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a1a:	4b53      	ldr	r3, [pc, #332]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a1e:	e098      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a20:	4b4f      	ldr	r3, [pc, #316]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a28:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a2a:	4b4d      	ldr	r3, [pc, #308]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d028      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a36:	4b4a      	ldr	r3, [pc, #296]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	099b      	lsrs	r3, r3, #6
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	623b      	str	r3, [r7, #32]
 8003a40:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4b47      	ldr	r3, [pc, #284]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a4c:	fb03 f201 	mul.w	r2, r3, r1
 8003a50:	2300      	movs	r3, #0
 8003a52:	fb00 f303 	mul.w	r3, r0, r3
 8003a56:	4413      	add	r3, r2
 8003a58:	4a43      	ldr	r2, [pc, #268]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a5a:	fba0 1202 	umull	r1, r2, r0, r2
 8003a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a60:	460a      	mov	r2, r1
 8003a62:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a66:	4413      	add	r3, r2
 8003a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	61fa      	str	r2, [r7, #28]
 8003a72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a7a:	f7fc fbad 	bl	80001d8 <__aeabi_uldivmod>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4613      	mov	r3, r2
 8003a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a86:	e053      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a88:	4b35      	ldr	r3, [pc, #212]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	2200      	movs	r2, #0
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	617a      	str	r2, [r7, #20]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a9a:	f04f 0b00 	mov.w	fp, #0
 8003a9e:	4652      	mov	r2, sl
 8003aa0:	465b      	mov	r3, fp
 8003aa2:	f04f 0000 	mov.w	r0, #0
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	0159      	lsls	r1, r3, #5
 8003aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab0:	0150      	lsls	r0, r2, #5
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	ebb2 080a 	subs.w	r8, r2, sl
 8003aba:	eb63 090b 	sbc.w	r9, r3, fp
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003aca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ace:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ad2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ad6:	eb63 0509 	sbc.w	r5, r3, r9
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	00eb      	lsls	r3, r5, #3
 8003ae4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ae8:	00e2      	lsls	r2, r4, #3
 8003aea:	4614      	mov	r4, r2
 8003aec:	461d      	mov	r5, r3
 8003aee:	eb14 030a 	adds.w	r3, r4, sl
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	eb45 030b 	adc.w	r3, r5, fp
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b06:	4629      	mov	r1, r5
 8003b08:	028b      	lsls	r3, r1, #10
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b10:	4621      	mov	r1, r4
 8003b12:	028a      	lsls	r2, r1, #10
 8003b14:	4610      	mov	r0, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	60fa      	str	r2, [r7, #12]
 8003b20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b24:	f7fc fb58 	bl	80001d8 <__aeabi_uldivmod>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b30:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003b40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b4a:	e002      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b4c:	4b05      	ldr	r3, [pc, #20]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3740      	adds	r7, #64	@ 0x40
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800
 8003b64:	00f42400 	.word	0x00f42400
 8003b68:	017d7840 	.word	0x017d7840

08003b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b70:	4b03      	ldr	r3, [pc, #12]	@ (8003b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b72:	681b      	ldr	r3, [r3, #0]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000008 	.word	0x20000008

08003b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b88:	f7ff fff0 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	0a9b      	lsrs	r3, r3, #10
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4903      	ldr	r1, [pc, #12]	@ (8003ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	080044d0 	.word	0x080044d0

08003bac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d038      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bd4:	4b68      	ldr	r3, [pc, #416]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bda:	f7fd fb0f 	bl	80011fc <HAL_GetTick>
 8003bde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003be2:	f7fd fb0b 	bl	80011fc <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e0bd      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bf4:	4b61      	ldr	r3, [pc, #388]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1f0      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	019b      	lsls	r3, r3, #6
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	071b      	lsls	r3, r3, #28
 8003c12:	495a      	ldr	r1, [pc, #360]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c1a:	4b57      	ldr	r3, [pc, #348]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c20:	f7fd faec 	bl	80011fc <HAL_GetTick>
 8003c24:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c28:	f7fd fae8 	bl	80011fc <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e09a      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c3a:	4b50      	ldr	r3, [pc, #320]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8083 	beq.w	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	4b48      	ldr	r3, [pc, #288]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5c:	4a47      	ldr	r2, [pc, #284]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c64:	4b45      	ldr	r3, [pc, #276]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c70:	4b43      	ldr	r3, [pc, #268]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a42      	ldr	r2, [pc, #264]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c7a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c7c:	f7fd fabe 	bl	80011fc <HAL_GetTick>
 8003c80:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c84:	f7fd faba 	bl	80011fc <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e06c      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c96:	4b3a      	ldr	r3, [pc, #232]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ca2:	4b36      	ldr	r3, [pc, #216]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003caa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d02f      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d028      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cca:	4b2e      	ldr	r3, [pc, #184]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cd0:	4b2c      	ldr	r3, [pc, #176]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003cd6:	4a29      	ldr	r2, [pc, #164]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cdc:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d114      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fd fa88 	bl	80011fc <HAL_GetTick>
 8003cec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cee:	e00a      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf0:	f7fd fa84 	bl	80011fc <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e034      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d06:	4b1d      	ldr	r3, [pc, #116]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0ee      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d1e:	d10d      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003d20:	4b16      	ldr	r3, [pc, #88]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d34:	4911      	ldr	r1, [pc, #68]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
 8003d3a:	e005      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a0e      	ldr	r2, [pc, #56]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d42:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003d46:	6093      	str	r3, [r2, #8]
 8003d48:	4b0c      	ldr	r3, [pc, #48]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d54:	4909      	ldr	r1, [pc, #36]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	7d1a      	ldrb	r2, [r3, #20]
 8003d6a:	4b07      	ldr	r3, [pc, #28]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003d6c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	42470068 	.word	0x42470068
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	40007000 	.word	0x40007000
 8003d84:	42470e40 	.word	0x42470e40
 8003d88:	424711e0 	.word	0x424711e0

08003d8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d141      	bne.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003daa:	4b25      	ldr	r3, [pc, #148]	@ (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d006      	beq.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dc0:	d131      	bne.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003dc2:	4b20      	ldr	r3, [pc, #128]	@ (8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003dc4:	617b      	str	r3, [r7, #20]
          break;
 8003dc6:	e031      	b.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd4:	d109      	bne.n	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003de0:	4a19      	ldr	r2, [pc, #100]	@ (8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	e008      	b.n	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003dea:	4b15      	ldr	r3, [pc, #84]	@ (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003df4:	4a15      	ldr	r2, [pc, #84]	@ (8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003dfc:	4b10      	ldr	r3, [pc, #64]	@ (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e02:	099b      	lsrs	r3, r3, #6
 8003e04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003e10:	4b0b      	ldr	r3, [pc, #44]	@ (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e16:	0f1b      	lsrs	r3, r3, #28
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e22:	617b      	str	r3, [r7, #20]
          break;
 8003e24:	e002      	b.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
          break;
 8003e2a:	bf00      	nop
        }
      }
      break;
 8003e2c:	e000      	b.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8003e2e:	bf00      	nop
    }
  }
  return frequency;
 8003e30:	697b      	ldr	r3, [r7, #20]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	00bb8000 	.word	0x00bb8000
 8003e48:	017d7840 	.word	0x017d7840
 8003e4c:	00f42400 	.word	0x00f42400

08003e50 <memset>:
 8003e50:	4402      	add	r2, r0
 8003e52:	4603      	mov	r3, r0
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d100      	bne.n	8003e5a <memset+0xa>
 8003e58:	4770      	bx	lr
 8003e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5e:	e7f9      	b.n	8003e54 <memset+0x4>

08003e60 <__libc_init_array>:
 8003e60:	b570      	push	{r4, r5, r6, lr}
 8003e62:	4d0d      	ldr	r5, [pc, #52]	@ (8003e98 <__libc_init_array+0x38>)
 8003e64:	4c0d      	ldr	r4, [pc, #52]	@ (8003e9c <__libc_init_array+0x3c>)
 8003e66:	1b64      	subs	r4, r4, r5
 8003e68:	10a4      	asrs	r4, r4, #2
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	42a6      	cmp	r6, r4
 8003e6e:	d109      	bne.n	8003e84 <__libc_init_array+0x24>
 8003e70:	4d0b      	ldr	r5, [pc, #44]	@ (8003ea0 <__libc_init_array+0x40>)
 8003e72:	4c0c      	ldr	r4, [pc, #48]	@ (8003ea4 <__libc_init_array+0x44>)
 8003e74:	f000 f818 	bl	8003ea8 <_init>
 8003e78:	1b64      	subs	r4, r4, r5
 8003e7a:	10a4      	asrs	r4, r4, #2
 8003e7c:	2600      	movs	r6, #0
 8003e7e:	42a6      	cmp	r6, r4
 8003e80:	d105      	bne.n	8003e8e <__libc_init_array+0x2e>
 8003e82:	bd70      	pop	{r4, r5, r6, pc}
 8003e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e88:	4798      	blx	r3
 8003e8a:	3601      	adds	r6, #1
 8003e8c:	e7ee      	b.n	8003e6c <__libc_init_array+0xc>
 8003e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e92:	4798      	blx	r3
 8003e94:	3601      	adds	r6, #1
 8003e96:	e7f2      	b.n	8003e7e <__libc_init_array+0x1e>
 8003e98:	080044e8 	.word	0x080044e8
 8003e9c:	080044e8 	.word	0x080044e8
 8003ea0:	080044e8 	.word	0x080044e8
 8003ea4:	080044ec 	.word	0x080044ec

08003ea8 <_init>:
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	bf00      	nop
 8003eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eae:	bc08      	pop	{r3}
 8003eb0:	469e      	mov	lr, r3
 8003eb2:	4770      	bx	lr

08003eb4 <_fini>:
 8003eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb6:	bf00      	nop
 8003eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eba:	bc08      	pop	{r3}
 8003ebc:	469e      	mov	lr, r3
 8003ebe:	4770      	bx	lr
